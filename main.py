import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import BadRequest
from db import session, User

API_TOKEN = '7089086031:AAELSrUv4Cwkc6PFyKNTLSUmR4nHo73OJSk' 

class Features(StatesGroup):
    WALLET = State()


# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN, parse_mode = "html")
storage = MemoryStorage()
dp = Dispatcher(bot, storage = storage)

# –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
channel_username = "@not_mell_ton"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands = ['start'], state = "*")
async def send_welcome(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        await state.finish()
        _bot = await bot.get_me()
        if not session.query(User).filter_by(id = message.from_id).first():
            user = User(id = message.from_id, username = message.from_user.username, ref_url = f"https://t.me/{_bot.username}?start={message.from_id}")
            session.add(user)

        chat_id = message.chat.id
        try:
            user = await bot.get_chat_member(channel_username, chat_id)
            if user.status == 'left' or user.status == 'kicked':
                raise BadRequest("Member has left")
            else:
                await send_airdrop_info(chat_id)
        except BadRequest as e:
            user_name = message.from_user.first_name
            return await message.answer(f"""
–ü—Ä–∏–≤–µ—Ç {user_name}üëã
–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ AIRDROP,–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª NOT MELL: {channel_username}
        """, reply_markup=subscribe_button())
            
        ref_start = message.text.split(" ")
        ref_id = int(ref_start[1]) if len(ref_start) == 2 else None

        if ref_id:
            if ref_id != message.from_id:
                ref_user = session.query(User).filter_by(id = ref_id).first()
                ref_user.ref_count = ref_user.ref_count + 1
                ref_user.balance = ref_user.balance + 200
                session.commit()
                await bot.send_message(ref_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
def subscribe_button():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚úÖ–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data = "subscribe_check"))
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
@dp.callback_query_handler(lambda query: query.data == 'subscribe_check')
async def check_subscription(query: types.CallbackQuery):
    chat_id = query.message.chat.id
    try:
        user = await bot.get_chat_member(channel_username, chat_id)
        if user.status == 'left' or user.status == 'kicked':
            raise BadRequest("Member has left")
        await query.message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
        await send_airdrop_info(chat_id)
    except BadRequest:
        await query.message.answer(f"–¢–ê –ù–£ –ù–ï–ï,—Ç—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è. –ü–æ–¥–ø–∏—à–∏—Å—å —Å–Ω–∞—á–∞–ª–∞ –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {channel_username} ü§ù")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ AIRDROP
async def send_airdrop_info(chat_id):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞—Ä—Ç–∏–Ω–∫–∏, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å URL –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard = [[
        KeyboardButton("AirDrop –ü—Ä–∞–≤–∏–ª–∞üìï"),
        KeyboardButton("–ú–æ–π –ë–∞–ª–∞–Ω—Åüí∏")
    ],
    [
        KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫üéí"),
        KeyboardButton("Twitter (—Ä–∞–Ω–Ω–∏–π –º–∏–Ω–∏-–¥—Ä–æ–ø)üçø")
    ],[
        KeyboardButton("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π üë•")
    ]])
    await bot.send_message(chat_id, "üîù –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é", reply_markup = keyboard)
    await bot.send_photo(chat_id, photo = types.InputFile('pictures/main.jpg'), caption = f"""
<strong>AIRDROP NOT MELL –°–¢–ê–†–¢–û–í–ê–õ!</strong>

–ü–æ–ª—É—á–∞–π 200 —Ç–æ–∫–µ–Ω–æ–≤  $NOTMELL –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ üí∞
–°–∞–º—ã–µ –ª–µ–≥–∫–∏–µ —É—Å–ª–æ–≤–∏—è –ø–æ—É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –±–æ–ª—å—à–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—É—Å–∫–∞!

<strong>–ù–∏–∫–∞–∫–∏—Ö –¥–æ–ª–≥–∏—Ö –æ–∂–∏–¥–∞–Ω–∏–π.
–í—ã–ø—É—Å–∫ –º–µ–º-—Ç–æ–∫–µ–Ω–∞ –æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ.
</strong>
–°—Ç–∞–Ω—å —á–∞—Å—Ç—å—é –∫—Ä—É—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏ $NOTMELL

<strong>–î–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –≤–æ–æ–∑–Ω—è!</strong>
{channel_username}
""", reply_markup = invite_button(chat_id))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞"
def invite_button(chat_id):
    ref_user = session.query(User).filter_by(id = chat_id).first()
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ üë•", url = "https://t.me/share/url?url=" + ref_user.ref_url))
    return markup

@dp.message_handler(content_types=types.ContentType.TEXT, state = Features.WALLET)
async def set_wallet(message: types.Message, state: FSMContext):
    await message.answer("–ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!‚úÖ")
    wallet_address = message.text
    ref_user = session.query(User).filter_by(id = message.from_id).first()
    ref_user.wallet = wallet_address
    session.commit()
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=types.ContentType.TEXT, state = "*")
async def process_text_messages(message: types.Message, state: FSMContext):
    await state.finish()
    ref_user = session.query(User).filter_by(id = message.from_id).first() 
    if message.text == "AirDrop –ü—Ä–∞–≤–∏–ª–∞üìï":
        await message.answer_photo(types.InputFile('pictures/terms.jpg'), caption = f"""
–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–∞–∑–¥–∞—á–µ —Ç–æ–∫–µ–Ω–æ–≤ $NOTMELL –≤—ã–ø–æ–ª–Ω–∏ 2 –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∞–≤–∏–ª–∞. 

1.–ë—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã–º –Ω–∞ –æ—Ñ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª NOTMELL {channel_username}

2.–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤—Å–µ—Ö –∫–µ–Ω—Ç–æ–≤ –∏ –∫–µ–Ω—Ç–∏—Ö –≤ –Ω–∞—à—É –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é –≤–æ–∑–Ω—é!

–ö–∞–∂–¥—ã–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –¥–∞–µ—Ç —Ç–µ–±–µ –Ω–∞ –±–∞–ª–∞–Ω—Å +200 —Ç–æ–∫–µ–Ω–æ–≤ $NOTMELL

–ú–æ–∂–µ—à—å –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –ø–æ —Å–≤–æ–µ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ: {ref_user.ref_url}

<strong>
–≠—Ç–æ –µ—â–µ –Ω–µ –≤—Å–µ!
–ß—Ç–æ –±—ã –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –µ—â–µ –æ–¥–Ω–æ–π —Ä–∞–∑–¥–∞—á–µ $$$$ –≤—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞–Ω–∏—è –≤–æ –≤–∫–ª–∞–¥–∫–µ Twitterüçø
</strong>

""")
    elif message.text == "–ú–æ–π –ë–∞–ª–∞–Ω—Åüí∏":
        await message.answer_photo(types.InputFile('pictures/balance.jpg'), caption = f"""
–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {ref_user.balance} $NOTMELL
<strong>1 –¥—Ä—É–≥ = 200 $NOTMELL</strong>

–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: {ref_user.ref_url}
""", reply_markup = invite_button(message.from_id))
    elif message.text == "–î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫üéí":
        await message.answer_photo(types.InputFile('pictures/wallet.jpg'), caption = """
<strong>–ö—É–¥–∞ –±—É–¥–µ—à—å –¥—Ä–æ–ø –ø–æ–ª—É—á–∞—Ç—å?</strong>                    

–î–æ–±–∞–≤—å —Å–≤–æ–π –Ω–µ–∫–∞—Å—Ç–æ–¥–∏–∞–ª—å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –≤ —Å–µ—Ç–∏ TON.
–ö –ø—Ä–∏–º–µ—Ä—É —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å: Tonkeeper\Tonhub\MyTonWallet

–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π —Ñ–∞–∑—ã —Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—à—å –Ω–∞ –∫–æ—à–µ–ª–µ–∫ —Ç–æ–∫–µ–Ω—ã $NOTMELL 
–°–∫–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏—à—å? –°–∫–æ–ª—å–∫–æ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—à—å,–ø–æ–∫–∞  –µ—Å—Ç—å –≤—Ä–µ–º—è –¥–µ–ª–∞–π!

–î–æ–±–∞–≤—å –∞–¥—Ä–µ—Å —Ç–≤–æ–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –≤ —Å–µ—Ç–∏ TON:
        """)
        await state.set_state(Features.WALLET)
    elif message.text == "Twitter (—Ä–∞–Ω–Ω–∏–π –º–∏–Ω–∏-–¥—Ä–æ–ø)üçø":
        await message.answer_photo(types.InputFile('pictures/twitter.jpg'), caption = """
<strong>–í—Å–µ–≥–æ –æ–¥–∏–Ω –¥—Ä–æ–ø?</strong>
–ê–•–ê–•–ê–•,—É –Ω–∞—Å –∏—Ö –¥–≤–∞.
–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à Twitter –∏ —Å–¥–µ–ª–∞–π —Ä–µ–ø–æ—Å—Ç –ª—é–±–æ–π –∑–∞–ø–∏—Å–∏ —Å–µ–±–µ.
–¢—ã —Å—Ç–∞–Ω–µ—à—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –µ—â–µ –æ–¥–Ω–æ–π —Ä–∞–∑–¥–∞—á–∏. 

–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–ø–æ—Å—Ç –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–ª –≤ —Ç–≤–∏—Ç—Ç–µ—Ä–µ:
""", reply_markup = types.InlineKeyboardMarkup(inline_keyboard = [[
    types.InlineKeyboardButton('–ù–∞—à TwitterüïäÔ∏è', url = 'https://twitter.com/NotMellTon')
]]))
    elif message.text == "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π üë•":
        await message.answer_photo(types.InputFile('pictures/refs.jpg'), f"""
–¢–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞,–ø–æ –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–µ—à—å –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π.
–ö–∞–∂–¥—ã–π –¥—Ä—É–≥ +200 $NOTMELL —Ç–µ–±–µ –Ω–∞ –±–∞–ª–∞–Ω—Å!
–ú–æ–∂–µ—à—å –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –ø–æ —Å–≤–æ–µ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ: {ref_user.ref_url}

–í—Å–µ –≤ —Ç–≤–æ–∏—Ö —Ä—É–∫–∞—Ö!
""", reply_markup = invite_button(message.from_id))

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
